syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "Sinodac.Contracts.DACMarket";

service DACMarketContract {

    option (aelf.csharp_state) = "DACMarketContractState";

    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) { }

    rpc CreateSeries (CreateSeriesInput) returns (google.protobuf.Empty) { }
    rpc AddProtocol (AddProtocolInput) returns (google.protobuf.Empty) { }

    rpc ConfirmCopyright (ConfirmCopyrightInput) returns (google.protobuf.Empty) { }
    rpc List (ListInput) returns (google.protobuf.Empty) { }
    rpc Delist (DelistInput) returns (google.protobuf.Empty) { }
    rpc Buy (BuyInput) returns (google.protobuf.Empty) { }
    rpc Redeem (RedeemInput) returns (google.protobuf.Empty) { }
    rpc Box (BoxInput) returns (google.protobuf.Empty) { }
    rpc Unbox (UnboxInput) returns (google.protobuf.Empty) { }

    rpc GetDACSeries (google.protobuf.StringValue) returns (DACSeries) {
        option (aelf.is_view) = true;
    }
    rpc GetDACCopyright (google.protobuf.StringValue) returns (DACCopyright) {
        option (aelf.is_view) = true;
    }
    rpc GetPublicTime (google.protobuf.StringValue) returns (google.protobuf.Timestamp) {
        option (aelf.is_view) = true;
    }
    rpc GetBoxInfo (google.protobuf.StringValue) returns (BoxInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetOwnBoxIdList (aelf.Address) returns (StringList) {
        option (aelf.is_view) = true;
    }
}

message InitializeInput {
    aelf.Address delegator_contract_address = 1;
    aelf.Address dac_contract_address = 2;
    aelf.Address admin_address = 3;
}

message AddProtocolInput {
    string series_name = 1;
    string dac_name = 2;
}

message ConfirmCopyrightInput {
    string dac_name = 1;
    bool is_confirm = 2;
    string copyright_id = 3;
}

message CreateSeriesInput {
    string series_name = 1;
    string series_description = 2;
    string creator_id = 3;
    string creator_user_id = 4;
}

message ListInput {
    string dac_name = 1;
    google.protobuf.Timestamp public_time = 2;
}

message DelistInput {
    string dac_name = 1;
}

message BuyInput {
    string dac_name = 1;
    int64 dac_id = 2;
    aelf.Address to = 3;
    int64 price = 4;
    string user_id = 5;
}

message RedeemInput {
    aelf.Address to = 1;
    string redeem_code = 2;
    string user_id = 3;
}

message BoxInput {
    string dac_name = 1;
}

message UnboxInput {
    aelf.Address to = 1;
    string dac_name = 2;
    string box_id = 3;
    string user_id = 4;
}

message DACCopyright {
    string dac_name = 1;
    string copyright_id = 2;
    bool is_confirmed = 3;
}

message DACSeries {
    string series_name = 1;
    string series_description = 2;
    string creator_id = 3;
    string creator_user_id = 4;
    StringList collection_list = 5;
    int64 collection_count = 6;
    google.protobuf.Timestamp create_time = 7;
}

message StringList {
    repeated string value = 1;
}

message BoxInfo {
    string dac_name = 1;
    int64 dac_id = 2;
    int64 price = 3;
}

// Events

message SeriesCreated {
    option (aelf.is_event) = true;
    string series_name = 1 [(aelf.is_indexed) = true];
    string creator_id = 2 [(aelf.is_indexed) = true];
    string creator_user_id = 3 [(aelf.is_indexed) = true];
    DACSeries dac_series = 4;
}

message ProtocolAdded {
    option (aelf.is_event) = true;
    string user_id = 1 [(aelf.is_indexed) = true];
    string series_name = 2 [(aelf.is_indexed) = true];
    string dac_name = 3 [(aelf.is_indexed) = true];
}

message DACListed {
    option (aelf.is_event) = true;
    string dac_name = 1 [(aelf.is_indexed) = true];
    google.protobuf.Timestamp public_time = 2 [(aelf.is_indexed) = true];
}

message DACDelisted {
    option (aelf.is_event) = true;
    string dac_name = 1 [(aelf.is_indexed) = true];
}

message CopyrightConfirmed {
    option (aelf.is_event) = true;
    string dac_name = 1 [(aelf.is_indexed) = true];
    string copyright_id = 2 [(aelf.is_indexed) = true];
}

message DACSold {
    option (aelf.is_event) = true;
    string user_id = 1 [(aelf.is_indexed) = true];
    string dac_name = 2 [(aelf.is_indexed) = true];
    int64 dac_id = 3 [(aelf.is_indexed) = true];
    int64 price = 4 [(aelf.is_indexed) = true];
    aelf.Address user_address = 5 [(aelf.is_indexed) = true];
}

message BoxSold {
    option (aelf.is_event) = true;
    string user_id = 1 [(aelf.is_indexed) = true];
    string dac_name = 2 [(aelf.is_indexed) = true];
    string box_id = 3 [(aelf.is_indexed) = true];
    int64 price = 4 [(aelf.is_indexed) = true];
    aelf.Address user_address = 5 [(aelf.is_indexed) = true];
    int64 dac_id = 6 [(aelf.is_indexed) = true];
}

message CodeRedeemed {
    option (aelf.is_event) = true;
    string user_id = 1 [(aelf.is_indexed) = true];
    string dac_name = 2 [(aelf.is_indexed) = true];
    string redeem_code = 3 [(aelf.is_indexed) = true];
    int64 dac_id = 4 [(aelf.is_indexed) = true];
    aelf.Address user_address = 5 [(aelf.is_indexed) = true];
}

message Boxed {
    option (aelf.is_event) = true;
    string dac_name = 1 [(aelf.is_indexed) = true];
}

message Unboxed {
    option (aelf.is_event) = true;
    string user_id = 1 [(aelf.is_indexed) = true];
    string dac_name = 2 [(aelf.is_indexed) = true];
    string box_id = 3 [(aelf.is_indexed) = true];
    int64 dac_id = 4 [(aelf.is_indexed) = true];
    aelf.Address user_address = 5 [(aelf.is_indexed) = true];
}