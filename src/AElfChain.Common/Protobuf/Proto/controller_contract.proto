
syntax = "proto3";
import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
option csharp_namespace = "Awaken.Contracts.Controller";

service ControllerContract {
option (aelf.csharp_state) = "ControllerContractState";
 
rpc Initialize(InitializeInput)returns(google.protobuf.Empty){
}
rpc EnterMarkets(ATokens)returns(google.protobuf.Empty){
} 
rpc ExitMarket(aelf.Address)returns(google.protobuf.Empty){
}
rpc MintAllowed(MintAllowedInput)returns(google.protobuf.Empty){
}
rpc MintVerify(MintVerifyInput)returns(google.protobuf.Empty){
}
rpc RedeemAllowed(RedeemAllowedInput)returns(google.protobuf.Empty){
}
rpc RedeemVerify(RedeemVerifyInput)returns(google.protobuf.Empty){
}
rpc BorrowAllowed(BorrowAllowedInput)returns(google.protobuf.Empty){
}
rpc BorrowVerify(BorrowVerifyInput)returns(google.protobuf.Empty){
}
rpc RepayBorrowAllowed(RepayBorrowAllowedInput)returns(google.protobuf.Empty){
}
rpc RepayBorrowVerify(RepayBorrowVerifyInput)returns(google.protobuf.Empty){
}
rpc LiquidateBorrowAllowed(LiquidateBorrowAllowedInput)returns(google.protobuf.Empty){
}
rpc LiquidateBorrowVerify(LiquidateBorrowVerifyInput)returns(google.protobuf.Empty){
}
rpc SeizeAllowed(SeizeAllowedInput)returns(google.protobuf.Empty){
}
rpc SeizeVerify(SeizeVerifyInput)returns(google.protobuf.Empty){
}
rpc TransferAllowed(TransferAllowedInput)returns(google.protobuf.Empty){
}
rpc TransferVerify(TransferVerifyInput)returns(google.protobuf.Empty){
}
rpc LiquidateCalculateSeizeTokens(LiquidateCalculateSeizeTokensInput)returns(google.protobuf.Int64Value){
}
rpc SetCloseFactor(google.protobuf.Int64Value)returns(google.protobuf.Empty){
}
rpc SetCollateralFactor(SetCollateralFactorInput)returns(google.protobuf.Empty){
}
rpc SetMaxAssets(google.protobuf.Int32Value)returns(google.protobuf.Empty){
}
rpc SetLiquidationIncentive(google.protobuf.Int64Value)returns(google.protobuf.Empty){  
}
rpc SupportMarket(aelf.Address)returns(google.protobuf.Empty){
}
rpc SetMarketBorrowCaps(SetMarketBorrowCapsInput)returns(google.protobuf.Empty){
}
rpc SetBorrowCapGuardian(aelf.Address)returns(google.protobuf.Empty){
}
rpc SetPauseGuardian(aelf.Address)returns(google.protobuf.Empty){
}
rpc SetMintPaused(SetPausedInput)returns(google.protobuf.BoolValue){
}
rpc SetBorrowPaused(SetPausedInput)returns(google.protobuf.BoolValue){
}  
rpc SetTransferPaused(google.protobuf.BoolValue)returns(google.protobuf.BoolValue){
}  
rpc SetSeizePaused(google.protobuf.BoolValue)returns(google.protobuf.BoolValue){
}  
rpc SetPriceOracle(aelf.Address)returns(google.protobuf.Empty){
}
rpc RefreshPlatformTokenSpeeds(google.protobuf.Empty)returns(google.protobuf.Empty){
}
rpc ClaimPlatformToken(ClaimPlatformTokenInput)returns(google.protobuf.Empty){
}
rpc SetPlatformTokenRate(google.protobuf.Int64Value)returns(google.protobuf.Empty){
}
rpc AddPlatformTokenMarkets(ATokens)returns(google.protobuf.Empty){
}
rpc DropPlatformTokenMarket(aelf.Address)returns(google.protobuf.Empty){
}

// Views
rpc GetAssetsIn (aelf.Address) returns (AssetList) {
option (aelf.is_view) = true;
}
rpc CheckMembership (Account) returns (google.protobuf.BoolValue) {
option (aelf.is_view) = true;
}
rpc GetAllMarkets(google.protobuf.Empty)  returns (ATokens) {
option (aelf.is_view) = true;
}
rpc GetAdmin(google.protobuf.Empty)returns(aelf.Address){
option (aelf.is_view) = true;
}
rpc GetPendingAdmin(google.protobuf.Empty)returns(aelf.Address){
option (aelf.is_view) = true;
}
rpc GetCloseFactor(google.protobuf.Empty)returns(google.protobuf.Int64Value){
option (aelf.is_view) = true;
}
rpc GetCollateralFactor(aelf.Address)returns(google.protobuf.Int64Value){
option (aelf.is_view) = true;
}
rpc GetMaxAssets(google.protobuf.Empty)returns(google.protobuf.Int32Value){
option (aelf.is_view) = true;
}
rpc GetLiquidationIncentive(google.protobuf.Empty)returns(google.protobuf.Int64Value){
option (aelf.is_view) = true;
}
rpc GetMarketBorrowCaps(aelf.Address)returns(google.protobuf.Int64Value){
option (aelf.is_view) = true;
}
rpc GetBorrowCapGuardian(google.protobuf.Empty)returns(aelf.Address){
option (aelf.is_view) = true;
}
rpc GetHypotheticalAccountLiquidity(GetHypotheticalAccountLiquidityInput)returns(GetHypotheticalAccountLiquidityOutput){
option (aelf.is_view) = true;
}
rpc GetPriceOracle(google.protobuf.Empty)returns(aelf.Address){
option (aelf.is_view) = true;
}
rpc GetMarket(aelf.Address)returns(Market){
option (aelf.is_view) = true;
}
rpc GetAccountLiquidity(aelf.Address)returns(GetAccountLiquidityOutput){
option (aelf.is_view) = true;
}

rpc GetPlatformTokenRate(google.protobuf.Empty)returns(google.protobuf.Int64Value){
option (aelf.is_view) = true;
}
rpc GetPlatformTokenSpeeds(aelf.Address)returns(google.protobuf.Int64Value){
option (aelf.is_view) = true;
}
rpc GetPlatformTokenSupplyState(aelf.Address)returns(PlatformTokenMarketState){
option (aelf.is_view) = true;
}
rpc GetPlatformTokenBorrowState(aelf.Address)returns(PlatformTokenMarketState){
option (aelf.is_view) = true;
}
rpc GetPlatformTokenSupplierIndex(Account)returns(aelf.BigIntValue){
option (aelf.is_view) = true;
}
rpc GetPlatformTokenBorrowerIndex(Account)returns(aelf.BigIntValue){
option (aelf.is_view) = true;
}
rpc GetPlatformTokenAccrued(aelf.Address)returns(google.protobuf.Int64Value){
option (aelf.is_view) = true;
}
rpc GetPauseGuardian(google.protobuf.Empty)returns(aelf.Address){
option (aelf.is_view) = true;
}
rpc GetTransferGuardianPaused(google.protobuf.Empty)returns(google.protobuf.BoolValue){
option (aelf.is_view) = true;
} 
rpc GetSeizeGuardianPaused(google.protobuf.Empty)returns(google.protobuf.BoolValue){
option (aelf.is_view) = true;
} 
rpc GetMintGuardianPaused(aelf.Address)returns(google.protobuf.BoolValue){
option (aelf.is_view) = true;
}
rpc GetBorrowGuardianPaused(aelf.Address)returns(google.protobuf.BoolValue){
option (aelf.is_view) = true;
}  
rpc GetPlatformTokenClaimThreshold(google.protobuf.Empty)returns(google.protobuf.Int64Value){
option (aelf.is_view) = true;
} 
rpc GetPlatformTokenClaimAmount(GetClaimPlatformTokenInput)returns(google.protobuf.Int64Value){
option (aelf.is_view) = true;
} 
}
message InitializeInput{
aelf.Address a_token_contract = 1;
string platform_token_symbol = 2;
}

message SetMarketBorrowCapsInput{
repeated MarketBorrowCap market_borrow_cap = 1;
}
message MarketBorrowCap{
aelf.Address a_token=1;
int64 new_borrow_cap=2;
}
message SetPausedInput{
aelf.Address a_token=1;
bool state=2;
}
message SeizeAllowedInput{
aelf.Address a_token_collateral=1;
aelf.Address a_token_borrowed=2;
aelf.Address liquidator=3;
aelf.Address borrower=4;
int64 seize_tokens=5; 
}
message SeizeVerifyInput{
aelf.Address a_token_collateral=1;
aelf.Address a_token_borrowed=2;
aelf.Address liquidator=3; 
aelf.Address borrower=4; 
int64 seize_tokens=5;  
}
message TransferAllowedInput{
aelf.Address a_token=1; 
aelf.Address src=2; 
aelf.Address dst=3; 
int64 transfer_tokens=4; 
}    
message TransferVerifyInput{
aelf.Address a_token=1; 
aelf.Address src=2; 
aelf.Address dst=3; 
int64 transfer_tokens=4;  
}
message LiquidateCalculateSeizeTokensInput{
aelf.Address a_token_borrowed=1; 
aelf.Address a_token_collateral=2; 
int64 actual_repay_amount=3; 
}
message SetCollateralFactorInput{
aelf.Address a_token=1;
int64 new_collateral_factor=2;
}
message RepayBorrowVerifyInput{
aelf.Address a_token=1; 
aelf.Address payer=2; 
aelf.Address borrower=3; 
int64 repay_amount=4; 
aelf.BigIntValue borrower_index=5; 
}
message LiquidateBorrowAllowedInput{
aelf.Address a_token_borrowed=1; 
aelf.Address a_token_collateral=2; 
aelf.Address liquidator=3; 
aelf.Address borrower=4; 
int64 repay_amount=5; 
}
message LiquidateBorrowVerifyInput{
aelf.Address a_token_borrowed=1; 
aelf.Address a_token_collateral=2; 
aelf.Address liquidator=3; 
aelf.Address borrower=4; 
int64 actual_repay_amount=5; 
int64 seize_tokens=6;
}
message MintAllowedInput{
aelf.Address a_token=1; 
aelf.Address minter=2; 
int64 mint_amount=3; 
}
message MintVerifyInput{
aelf.Address a_token=1; 
aelf.Address minter=2; 
int64 actual_mint_amount=3; 
int64 mint_tokens=4; 
}
message RedeemAllowedInput{
aelf.Address a_token=1; 
aelf.Address redeemer=2; 
int64 redeem_tokens=3; 
}
message RedeemVerifyInput{
aelf.Address a_token=1; 
aelf.Address minter=2; 
int64 redeem_amount=3; 
int64 redeem_tokens=4; 
}
message BorrowAllowedInput{
aelf.Address a_token=1; 
aelf.Address borrower=2; 
int64 borrow_amount=3; 
}
message BorrowVerifyInput{
aelf.Address a_token=1; 
aelf.Address borrower=2; 
int64 borrow_amount=3; 
}
message RepayBorrowAllowedInput{
aelf.Address a_token=1; 
aelf.Address payer=2; 
aelf.Address borrower=3; 
int64 repay_amount=4; 
}
message GetHypotheticalAccountLiquidityInput{
aelf.Address account=1;
aelf.Address a_token_modify=2;
int64 redeem_tokens=3;
int64 borrow_amount=4;
}

message ClaimPlatformTokenInput{
repeated aelf.Address holders = 1;
repeated aelf.Address a_tokens = 2;
bool borrowers = 3;
bool suppliers = 4;
}

message GetClaimPlatformTokenInput{
aelf.Address holder = 1;
bool borrowers = 2;
bool suppliers = 3;
}
//output
message GetHypotheticalAccountLiquidityOutput{
int64 liquidity=1;
int64 shortfall=2;
}
message GetAccountLiquidityOutput{
int64 liquidity=1;
int64 shortfall=2;
}
//struct
message PlatformTokenMarketState{
aelf.BigIntValue index=1;
int64 block=2;
}
message AssetList{
    repeated aelf.Address assets = 1;
}
message Account{
    aelf.Address a_token = 1;
    aelf.Address address = 2;
}
message ATokens{
repeated aelf.Address a_token = 1;
}
message Market {
    bool is_listed = 1;
    int64 collateral_factor = 2;
    map<string,bool> account_membership = 3;
    bool is_platform_tokened = 4;
}
//event
message MarketListed{
option (aelf.is_event) = true;
aelf.Address a_Token=1;
}

message MarketEntered{
option (aelf.is_event) = true;
aelf.Address a_Token=1;
aelf.Address account=2;
}

message MarketExited{
option (aelf.is_event) = true;
aelf.Address a_Token=1;
aelf.Address account=2;
}

message CloseFactorChanged{
option (aelf.is_event) = true;
int64 old_close_factor=1;
int64 new_close_factor=2;
} 

message CollateralFactorChanged{
option (aelf.is_event) = true;
aelf.Address a_token=1;
int64 old_collateral_factor=2;
int64 new_collateral_factor=3;
}

message LiquidationIncentiveChanged{
option (aelf.is_event) = true;
int64 old_liquidation_incentive=1;
int64 new_liquidation_incentive=2;
}

message MaxAssetsChanged{
option (aelf.is_event) = true;
int64 old_max_assets=1;
int64 new_max_assets=2;
}

message PriceOracleChanged{
option (aelf.is_event) = true;
aelf.Address old_price_oracle=1;
aelf.Address new_price_oracle=2;
}

message PauseGuardianChanged{
option (aelf.is_event) = true;
aelf.Address old_pause_guardian=1;
aelf.Address new_pause_guardian=2;
}

message ActionPaused{
option (aelf.is_event) = true;
aelf.Address a_token=1;
string action=2;
bool pauseState=3;
}

message MarketPlatformTokened{
option (aelf.is_event) = true;
aelf.Address a_token=1;
bool isPlatformTokened=2;
}

message PlatformTokenRateChanged{
option (aelf.is_event) = true;
int64 old_platform_token_rate=1;
int64 new_platform_token_rate=2;
}

message PlatformTokenSpeedUpdated{
option (aelf.is_event) = true;
aelf.Address a_token=1;
int64 new_speed=2;
}

message DistributedSupplierPlatformToken{
option (aelf.is_event) = true;
aelf.Address a_token =1; 
aelf.Address supplier=2; 
aelf.BigIntValue platform_token_delta=3; 
aelf.BigIntValue platform_token_supply_index=4;
}

message DistributedBorrowerPlatformToken{
option (aelf.is_event) = true;
aelf.Address a_token =1; 
aelf.Address borrower=2; 
aelf.BigIntValue platform_token_delta=3; 
aelf.BigIntValue platform_token_borrow_index=4;
}

message BorrowCapChanged{
option (aelf.is_event) = true;
aelf.Address a_Token=1;
int64 new_borrow_cap=2;
}

message BorrowCapGuardianChanged{
option (aelf.is_event) = true;
aelf.Address old_borrow_cap_guardian=1;
aelf.Address new_borrow_cap_guardian=2;
}