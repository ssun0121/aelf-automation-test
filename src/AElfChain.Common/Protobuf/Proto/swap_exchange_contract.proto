/* This files is part of the Hello World smart contract example that is included in Boilerplate.
 * It is only the definition of the contract, implementation is located in the "contract" folder
 * and tests are located in the "test" folder.
 *
 * You can use this as a basic template for new contracts.
 * 
 * When building Boilerplate or the contract project located in the "../contract/Awaken.Contracts.SwapExchangeContract/" 
 * protoc (the protobuf compiler) will be invoked and this file will produce a .c.cs file and .g.cs file, in the 
 * "../contract/Awaken.Contracts.SwapExchangeContract/Protobuf/Generated/" folder. 
 */

// the version of the language, use proto3 for contracts
syntax = "proto3";

// some core imports for aelf chain types
import "aelf/core.proto";
import "aelf/options.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

// the name of the C# namespace in which the contract code will be,
// generated code will also be in this namespace.
option csharp_namespace = "Awaken.Contracts.SwapExchangeContract";

// the contract definition: a gRPC service definition.
service SwapExchangeContract {
  option (aelf.csharp_state) = "SwapExchangeContractState";

  rpc Initialize(InitializeInput) returns(google.protobuf.Empty){}
  //Action    
  rpc SwapLpTokens(SwapTokensInput) returns(google.protobuf.Empty){}
  rpc SwapCommonTokens(SwapTokensInput) returns(google.protobuf.Empty){}
  rpc SetReceivor(aelf.Address) returns (google.protobuf.Empty){}
  rpc SetTargetToken(google.protobuf.StringValue) returns(google.protobuf.Empty){}
  rpc SetSwapToTargetTokenThreshold(Thresholdinput) returns(google.protobuf.Empty){}
  // Inline transcation
  rpc RemoveLiquidityInline(RemoveLiquidityInlineInput) returns(google.protobuf.Empty){}
  rpc CumulativeTokenAmountInline(CumulativeTokenAmountInlineInput) returns(google.protobuf.Empty){}
  rpc SwapTokensInline(SwapTokensInlineInput) returns(google.protobuf.Empty){}
  rpc SwapTokenToTargetInline(SwapTokenToTargetInlineInput) returns(google.protobuf.Empty){}
  //View
  rpc Owner(google.protobuf.Empty) returns(aelf.Address){
    option (aelf.is_view) = true;
  }

  rpc TargetToken(google.protobuf.Empty) returns(google.protobuf.StringValue){
    option (aelf.is_view) = true;
  }

  rpc Receivor(google.protobuf.Empty) returns(aelf.Address){
    option (aelf.is_view) = true;
  }

  rpc Threshold(google.protobuf.Empty) returns(ThresholdOutput){
    option (aelf.is_view) = true;
  }
  
  rpc GetHandlePath(HandlePathInput) returns(HandlePathOutput){
    option (aelf.is_view) = true;
  }
}


// input
message HandlePathInput{
  string  symbol = 1;
  Path path_pair = 2;
}

message SwapTokenToTargetInlineInput{
  Token token =1;
  Path  path_info=2;
}
message Thresholdinput{
  int64 lp_token_threshold     = 1;
  int64 common_token_threshold = 2;
}
message SwapTokensInlineInput{
  map<string, Path> path_map = 1;
}

message CumulativeTokenAmountInlineInput{
  string tokenA       = 1;
  string tokenB       = 2;
  int64  tokenABefore = 3;
  int64  tokenBBefore = 4;
}

message InitializeInput{
  aelf.Address Onwer             = 1;
  string       target_token      = 2;
  aelf.Address Receivor          = 3;
  aelf.Address swap_contract     = 4;
  aelf.Address lp_token_contract = 5;
}

message RemoveLiquidityInlineInput{
  Token token = 1;
}

message Path{
  repeated string  value        = 1;
  int64            slip_point   = 2;
  aelf.BigIntValue expect_price = 3;
}

message SwapTokensInput{
  map<string, Path> path_map        = 1;
  TokenList         swap_token_list = 2;
}

message Token{
  string token_symbol = 1;
  int64  amount       = 2;
}

message TokenList{
  repeated Token tokens_info = 1;
}
// output
message ThresholdOutput{
  int64 lp_token_threshold     = 1;
  int64 common_token_threshold = 2;
}

message HandlePathOutput{
  repeated string path = 1;
}
// Event
message SwapResultEvent{
  option (aelf.is_event) = true;
  string symbol          = 1;
  bool   result          = 2;
  int64  amount          = 3;
  bool   is_lptoken      = 4;
  int64   amountOut       = 5;
  aelf.BigIntValue actual_slip_point = 6;
}


