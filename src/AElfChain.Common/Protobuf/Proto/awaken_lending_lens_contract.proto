syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
 

option csharp_namespace = "Awaken.Contracts.AwakenLendingLens";

service AwakenLendingLensContract {
option (aelf.csharp_state) = "Awaken.Contracts.AwakenLendingLens.AwakenLendingLensContractState";

// Actions
rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {
}
rpc GetATokenMetadata(aelf.Address) returns(ATokenMetadata) {
option (aelf.is_view) = true;
}
rpc GetATokenMetadataInline(aelf.Address) returns(ATokenMetadata) {
option (aelf.is_view) = true;
}
rpc GetATokenMetadataAll(ATokens) returns(ATokenMetadataAll) {
option (aelf.is_view) = true;
}
rpc GetATokenBalances(Account)returns(ATokenBalances) {
option (aelf.is_view) = true;
}
rpc GetATokenBalancesAll(GetATokenBalancesAllInput)returns(ATokenBalancesAll) {
option (aelf.is_view) = true;
}
rpc GetATokenUnderlyingPrice(aelf.Address) returns(ATokenUnderlyingPrice) {
option (aelf.is_view) = true;
}
rpc GetATokenUnderlyingPriceAll(ATokens) returns(ATokenUnderlyingPriceAll) {
option (aelf.is_view) = true;
}
rpc GetAccountLimits(GetAccountLimitsInput)returns(AccountLimits){
option (aelf.is_view) = true;
}
rpc GetPlatformTokenBalanceMetadata(GetPlatformTokenBalanceMetadataInput)returns(PlatformTokenBalanceMetadata){
option (aelf.is_view) = true;
}

rpc GetPlatformTokenBalanceMetadataExt(GetPlatformTokenBalanceMetadataExtInput)returns(PlatformTokenBalanceMetadataExt){
option (aelf.is_view) = true;
}
}
message InitializeInput {
aelf.Address a_token_contract = 1;
aelf.Address comtroller_contract = 2;
}
message GetATokenBalancesAllInput{
ATokens a_tokens = 1;
aelf.Address user = 2;
}
message GetAccountLimitsInput{
aelf.Address comptroller = 1;
aelf.Address user = 2;
}
message GetPlatformTokenBalanceMetadataInput{
string platform_token = 1;
aelf.Address user = 2;
}
message GetPlatformTokenBalanceMetadataExtInput{
string platform_token = 1;
aelf.Address comptroller = 2;
aelf.Address user = 3;
}
//struct
message Account{
    aelf.Address a_token = 1;
    aelf.Address address = 2;
}
message ATokenMetadata {
aelf.Address a_Token = 1;
int64 exchange_rate_current = 2;
int64 supply_rate_per_block = 3;
int64 borrow_rate_per_block = 4;
int64 reserve_factor_mantissa = 5;
int64 total_borrows = 6;
int64 total_reserves = 7;
int64 total_supply = 8;
int64 total_cash = 9;
bool is_listed = 10;
int64 collateral_factor_mantissa = 11;
string underlying_asset = 12;
int32 a_Token_decimals = 13;
int32 underlying_decimals = 14;
}

message ATokens{
repeated aelf.Address a_Token = 1;
}
message ATokenMetadataAll{
repeated ATokenMetadata metadata = 1;
}
message ATokenBalances{
aelf.Address a_Token = 1;
int64 balanceOf = 2;
int64 borrow_balance_current = 3;
int64 balance_of_underlying = 4;
int64 token_balance = 5;
int64 token_allowance = 6;
}
message ATokenBalancesAll{
repeated ATokenBalances balances = 1;
}
message ATokenUnderlyingPrice {
aelf.Address a_Token = 1;
int64 underlying_price = 2;
}
message ATokenUnderlyingPriceAll{
repeated ATokenUnderlyingPrice underlying_price = 1;
}
message AccountLimits {
repeated aelf.Address markets = 1;
int64 liquidity = 2;
int64 shortfall = 3;
}
message PlatformTokenBalanceMetadata {
int64 balance = 1;
int64 votes = 2;
aelf.Address delegate= 3;
}
message PlatformTokenBalanceMetadataExt {
int64 balance = 1;
int64 votes = 2;
aelf.Address delegate= 3;
int64 allocated = 4;
}

